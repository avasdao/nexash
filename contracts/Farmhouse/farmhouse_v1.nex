pragma nexscript >= 0.1.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2023 Ava's DAO
 * Released under the MIT License.
 *
 * Farmhouse
 *
 * Creates a non-custodial container (ie. smart contract address), to be used
 * for securing one or more assets until a specific expiration time in the
 * future.
 *
 * Assets being held (ie. time-locked) in a farmhouse:
 *   1. cannot be transferred until AFTER the growing season (expiration) time.
 *   2. are 100% under the control of the farmhouse farmer.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x0000000000000000000000000000000000000000
 * Namespace   : FARMH01
 *
 * farmer  : Party whom will receive the payouts.
 * seasons : The number of (512 second) cycles until expiration.
 *
 * Reservation Times
 *   - 1 HOUR     1 hour         ~7 cycles
 *   - 1 DAY      1 day        ~169 cycles
 *   - 1 MONTH    30 days    ~5,063 cycles
 *   - 1 QUARTER  90 days   ~15,188 cycles
 *   - 1 YEAR     365 days  ~61,594 cycles
 * NOTE: Each season cycle lasts for 512 seconds; while there are
 *       exactly 168.75 cycles in a 24 hour day.
 * (source: https://prestwi.ch/bitcoin-time-locks/)
 *
 * For more information, please visit the following resources:
 *   - https://docs.nexa.exchange/create/farm
 *   - https://docs.nexa.exchange/trade/farming
 *   - https://avasdao.org
 *
 */
contract Farmhouse(
    pubkey farmer,
    int seasons,
    pubkey provider,
    pubkey admin,
) {
    /**
     * Harvest
     *
     * Allows a Liquidity Provider to "melt" held assets AFTER the
     * growing season(s) have completed; and reward the Farmer with
     * "locked" assets (eg. $NEXA), at a rate determined by the Provider.
     *
     * NOTE: Farmhouse transactions MUST ALL be approved by the
     *       "designated" administration (eg. Nexa Exchange DAO).
     *
     * NOTE: A fallback is triggered (after 30 days), which allows
     *       the Provider the ability to override (and replace) the
     *       operation of the administration.
     *
     * @param farmer
     * @param signature
     */
    function harvest(sig signature) {
        /* Verify UTXO age is AFTER the growing season(s). */
        require(tx.age >= seasons);

        /* Verify transaction is signed by the farmhouse farmer. */
        require(checkSig(signature, farmer));
    }
}
