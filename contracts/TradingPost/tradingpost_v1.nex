pragma nexscript ^0.5.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2023 Ava's DAO
 * Released under the MIT License.
 *
 * Trading Post
 *
 * Allows for decentralized swap of $NEXA with ANY other (token) asset.
 *
 * NOTES
 * --------------------
 * TBD..
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Fingerprint : 0x00000000
 * Signature   : 0x0000000000000000000000000000000000000000
 * Namespace   : TPOST01
 *
 * tokenid : TBD
 * seller  : TBD
 * ask     : TBD
 * buyer   : TBD
 * bid     : TBD
 *
 * For more information, please visit the following resources:
 *   - https://docs.causes.cash/trading-post
 *   - https://avasdao.org
 *
 */
contract TradingPost(
    bytes32 tokenid,
    bytes20 seller,
    int ask,
    bytes20 buyer,
    int bid,
    bytes20 arbiter
) {
    /**
     * Cancel Trade
     *
     * Refunds any and all deposited funds and/or assets back to their
     * respective owners.
     *
     * NOTE: This can ONLY be executed by one (1) of three (3) parties
     *       directly involved in the transaction.
     *
     * @param owner
     * @param signature
     */
    function cancel(pubkey executor, sig signature) {
        int DUST_VALUE = 546;
        int MAX_OUTPUTS = 2;

        // NOTE: This is the asset output.
        require(tx.outputs.length == MAX_OUTPUTS);

        // NOTE: This is the asset output.
        require(tx.outputs[0].value == DUST_VALUE);

        // NOTE: This is the arbiter/processer output.
        require(tx.outputs[1].value != DUST_VALUE);

        /* Calculate Seller bytecode. */
        bytes23 sellerBytecode = new LockingBytecodeP2PKT(seller);

        /* Verify that we payout to the Creator. */
        require(tx.outputs[0].lockingBytecode == sellerBytecode);

        /* Verify transaction has a valid signature. */
        require(checkSig(signature, executor));

        /* Hash the executor's public key. */
        bytes20 pkh = hash160(executor);

        /* Verify the executor is an authorized participant. */
        require(
            (pkh == seller) ||
            (pkh == buyer) ||
            (pkh == arbiter)
        );
    }

    /**
     * Trade (Token) Asset
     *
     * NOTE: Anyone can call this function and broadcast to the blockchain,
     *       AFTER the trade terms have been satisfied completely.
     */
    function trade() {
        int MAXIMUM_NUM_OUTPUTS = 2;

        /* Validate number of outputs. */
        // We restrict the outputs to:
        //   - 1st output is the asset transfer.
        //   - 2nd output is the payment to the asset Owner.
        //   - (optional) additional output(s) may one or more "change" or "arbiter fee" output(s).
        //     NOTE: The 3rd output is NOT enforced and can be anything agreed by all parties.
        require(tx.outputs.length >= MAXIMUM_NUM_OUTPUTS);

        int DUST_VALUE = 546;

        // NOTE: This is the asset output.
        require(tx.outputs[0].value == DUST_VALUE);

        int ASSET_OUTPUT_IDX = 0;
        int GROUP_OUTPUT_LENGTH = 22;
        int NFT_OUTPUT_LENGTH = 11;

        bytes lockingAsset = tx.outputs[ASSET_OUTPUT_IDX].lockingBytecode;
        int lockingAssetLen = lockingAsset.length;

        /* Validate asset/token transfer output. */
        // NOTE: Confirm any possibilities to "engineer" around this check.
        require(
            within(
                lockingAssetLen,
                GROUP_OUTPUT_LENGTH,    // 16-bit value length
                GROUP_OUTPUT_LENGTH + 5 // 64-bit value length (+1)
            ) ||
            within(
                lockingAssetLen,
                NFT_OUTPUT_LENGTH,      // 16-bit value length
                NFT_OUTPUT_LENGTH + 5   // 64-bit value length (+1)
            )
        );

        /* Validate asset/token id. */
        require(lockingAsset
            .split(1)[1]
            .split(20)[0] == tokenid
        );

        /* Retrieve asset/token amount (length). */
        int amountLen = int(lockingAsset
            .split(21)[1]
            .split(1)[0]);

        /* Validate asset/token amount. */
        require(
            int(lockingAsset
                .split(22)[1]
                .split(amountLen)[0]) >= bid
        );

        // require(
        //     // 16-bit validation
        //     (
        //         bid <= int(0xffff) &&
        //         int(lockingAsset
        //             .split(22)[1]
        //             .split(2)[0]) >= bid
        //     ) ||
        //
        //     // 32-bit validation
        //     (
        //         bid <= int(0xffffffff) &&
        //         int(lockingAsset
        //             .split(22)[1]
        //             .split(4)[0]) >= bid
        //     ) ||
        //
        //     // 64-bit validation
        //     int(lockingAsset
        //         .split(22)[1]
        //         .split(8)[0]) >= bid
        // );

        int TEMPLATE_1_OUTPUT_LENGTH = 33;

        int PAYMENT_OUTPUT_IDX = 1;

        /* Validate payment output. */
        require(tx.outputs[PAYMENT_OUTPUT_IDX]
            .lockingBytecode
            .length == TEMPLATE_1_OUTPUT_LENGTH
        );

        /* Validate payment amount. */
        require(tx.outputs[PAYMENT_OUTPUT_IDX].value == ask);
    }
}
