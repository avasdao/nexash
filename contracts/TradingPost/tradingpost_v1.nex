pragma nexscript >= 0.2.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2023 Ava's DAO
 * Released under the MIT License.
 *
 * Trading Post
 *
 * Allows for a decentralized exchange of $NEXA with ANY other (token) asset,
 * using a "trustless" atomic swap. There is ZERO risk of either party losing
 * their asset(s) during the exchange.
 *
 * An additional fee may be charged, if there is a Provider added to the
 * contract's parameters.
 *
 * NOTES
 * --------------------
 * TBD
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x0000000000000000000000000000000000000000
 * Namespace   : TPOST01
 *
 * tokenid  : (bytes32) The token id of the asset.
 * seller   : (bytes20) The sellers' public key hash.
 * rate     : (int)     An optional amount charged by the Provider. (measured in basis points (bp), eg. 5.25% = 525bp)
 * provider : (bytes20) An optional 3rd-party (agreed upon by the Buyer and Seller) used to facilitate the tranaction.
 * fee      : (int)     An optional amount charged by the Provider. (measured in basis points (bp), eg. 5.25% = 525bp)
 *
 * For more information, please visit the following resources:
 *   - https://docs.causes.cash/trading-post
 *   - https://avasdao.org
 *
 */
contract TradingPost(
    bytes32 tokenid,
    bytes20 seller,
    int rate,
    bytes20 provider,
    int fee,
) {
    /**
     * Trade (Token) Asset
     *
     * Sends the Buyer the requested quantity of an asset, at a rate set
     * by the contract's owner (ie. the Seller).
     *
     * OUTPUTS:
     *   (0) Token (trade) asset [covenant]
     *   (1) (NEXA) payment to Seller [covenant]
     *   (2) (Asset) delivery to Buyer [covenant]
     *   (3) (NEXA) Fee paid to Provider [covenant]
     *   (4) (Optional) coin change
     */
    function trade() {
        /* Verify Buyer asset. */
        require(tx.outputs[2].tokenGroupId == tokenid);

        /* Create Seller bytecode. */
        bytes23 sellerBytecode = new LockingBytecodeP2PKT(seller);

        /* Verify Seller bytecode. */
        require(tx.outputs[1].lockingBytecode == sellerBytecode);

        /* Set amount of $NEXA Buyer "paid" to contract. */
        int sellerPayout = tx.outputs[1].value;

        /* Calculate Buyer (asset) delivery quantity. */
        // NOTE: Wallet MUST match any (integer) rounding when constructing
        //       the transaction.
        int buyerAssetQty = (sellerPayout * 100) / rate;

        /* Verify Buyer (asset) payout amount. */
        require(tx.outputs[2].tokenAmount == buyerAssetQty);

        /* Token (asset) change). */
        // NOTE: Verify any remaining assets are transferred back to the contract.
        if (buyerAssetQty < tx.inputs[0].tokenAmount) {
            /* Verify locking bytecode. */
            require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);

            /* Verify token id. */
            require(tx.outputs[0].tokenGroupId == tokenid);

            /* Verify token (change) amount. */
            require(tx.outputs[0].tokenAmount == (tx.inputs[0].tokenAmount - buyerAssetQty));
        }

        /* Calculate Provider commission amount (received). */
        int commission = (sellerPayout * fee) / 10000;

        /* Set dust value. */
        int DUST_VALUE = 546;

        /* Verify and handle commission payout. */
        if (commission > DUST_VALUE) {
            /* Verify Provider payout amount. */
            require(tx.outputs[3].value >= commission);

            /* Verify (coin) payout. */
            require(tx.outputs[3].tokenGroupId == 0x0);

            /* Create Provider bytecode. */
            bytes23 providerBytecode = new LockingBytecodeP2PKT(provider);

            /* Verify Provider bytecode. */
            require(tx.outputs[3].lockingBytecode == providerBytecode);
        }

        /* Set maximum outputs. */
        int MAXIMUM_OUTPUTS = 5;

        /* Verify (maximum) outputs. */
        require(tx.outputs.length <= MAXIMUM_OUTPUTS);

        /* Verify (coin) change. */
        require(tx.outputs.length == 4 || tx.outputs[4].tokenGroupId == 0x0);
    }
}
