pragma nexscript >= 0.2.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2023 Ava's DAO
 * Released under the MIT License.
 *
 * Wiserswap
 *
 * Empty contract template.
 *
 * NOTES
 * --------------------
 * Based on the Cauldron contract by Dagur Valberg Johannsson
 * (source: https://www.cauldron.quest/_files/ugd/ae85be_b1dc04d2b6b94ab5a200e3d8cd197aa3.pdf)
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Fingerprint : 0x0000000000000000000000000000000000000000
 * Namespace   : WISER01
 *
 * seller     : (bytes20) The sellers' public key hash.
 * tokenGet   : (bytes32) The token id of the asset.
 * amountGet  : (int)     The amount of NEXA requested by the seller.
 * tokenGive  : (bytes32) The token id of the asset.
 * amountGive : (int)     The amount of NEXA requested by the seller.
 * provider   : (bytes20) An optional 3rd-party (agreed upon by the Buyer and Seller) used to facilitate the tranaction.
 * fee        : (int)     An optional amount charged by the Provider. (measured in basis points (bp), eg. 5.25% = 525bp)
 * expires    : (int)     An optional amount charged by the Provider. (measured in basis points (bp), eg. 5.25% = 525bp)
 *
 * For more information, please visit the following resources:
 *   - https://docs.causes.cash/trading-post
 *   - https://avasdao.org
 *
 */
contract Wiserswap(
    bytes20 seller,
    bytes32 tokenGet,
    int amountGet,
    bytes32 tokenGive,
    int amountGive,
    bytes20 provider,
    int fee,
    int expires
) {
    /**
     * Swap
     *
     * Allows two (2) assets to be swapped with each other, while maintaining
     * the same contant multiplier??
     */
    function swap() {
        /* Set dust value. */
        int DUST_VALUE = 546;

        /* Verify parameter. */
        require(param >= DUST_VALUE);

        // 1.
        // 2.
        // 3.


        /* Verify transaction is signed by the owner. */
        require(checkSig(signature, owner));
    }

    /**
     * Withdraw
     *
     * Allows a liquidity provider to transfer their assets out from the pool.
     *
     * @param signature
     */
    function withdraw(sig signature) {
        /* Verify transaction is signed by the owner. */
        require(checkSig(signature, owner));
    }
}
